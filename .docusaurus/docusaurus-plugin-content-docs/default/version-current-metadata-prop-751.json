{
  "pluginId": "default",
  "version": "current",
  "label": "Next",
  "banner": null,
  "badge": false,
  "className": "docs-version-current",
  "isLast": true,
  "docsSidebars": {
    "tutorialSidebar": [
      {
        "type": "link",
        "label": "Getting Started",
        "href": "/",
        "docId": "intro"
      },
      {
        "type": "category",
        "label": "React Basics & Working With Components",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Introducing JSX",
            "href": "/react-basics-working-with-components/introducing-jsx",
            "docId": "react-basics-working-with-components/introducing-jsx"
          }
        ]
      },
      {
        "type": "category",
        "label": "Types and Operators",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "型別 (Types)",
            "href": "/types-and-operators/types",
            "docId": "types-and-operators/types"
          },
          {
            "type": "link",
            "label": "運算子 (Operators)",
            "href": "/types-and-operators/operators",
            "docId": "types-and-operators/operators"
          }
        ]
      },
      {
        "type": "category",
        "label": "Objects and Functions",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "物件實體語法 (Object Literal Syntax)",
            "href": "/objects-and-functions/object-literal",
            "docId": "objects-and-functions/object-literal"
          },
          {
            "type": "link",
            "label": "函式就是物件 (Functions Are Objects)",
            "href": "/objects-and-functions/function-object",
            "docId": "objects-and-functions/function-object"
          },
          {
            "type": "link",
            "label": "傳值和傳參考",
            "href": "/objects-and-functions/value-reference",
            "docId": "objects-and-functions/value-reference"
          },
          {
            "type": "link",
            "label": "物件 × 函式 × this",
            "href": "/objects-and-functions/this",
            "docId": "objects-and-functions/this"
          },
          {
            "type": "link",
            "label": "函式參數與 arguments、spread",
            "href": "/objects-and-functions/arguments-spread",
            "docId": "objects-and-functions/arguments-spread"
          },
          {
            "type": "link",
            "label": "立即呼叫的函式表達式 (IIFEs) 與安全程式碼",
            "href": "/objects-and-functions/iife-safe-code",
            "docId": "objects-and-functions/iife-safe-code"
          }
        ]
      },
      {
        "type": "category",
        "label": "Functions Extras",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "閉包 (Closure)",
            "href": "/functions-extras/closure",
            "docId": "functions-extras/closure"
          },
          {
            "type": "link",
            "label": "函式工廠 (Function Factory)",
            "href": "/functions-extras/function-factory",
            "docId": "functions-extras/function-factory"
          },
          {
            "type": "link",
            "label": "回呼函式 (Callback Function)",
            "href": "/functions-extras/callback-function",
            "docId": "functions-extras/callback-function"
          },
          {
            "type": "link",
            "label": "bind()、call() 與 apply()",
            "href": "/functions-extras/bind-call-apply",
            "docId": "functions-extras/bind-call-apply"
          },
          {
            "type": "link",
            "label": "Functional Programming ft. Underscore, Loadsh",
            "href": "/functions-extras/functional-programming",
            "docId": "functions-extras/functional-programming"
          }
        ]
      },
      {
        "type": "category",
        "label": "Object-Oriented Javascript and Prototypal Inheritance",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "物件導向與原型繼承",
            "href": "/object-oriented-javascript-and-prototypal-inheritance/prototype",
            "docId": "object-oriented-javascript-and-prototypal-inheritance/prototype"
          },
          {
            "type": "link",
            "label": "new × 函式建構子 × 原型屬性",
            "href": "/object-oriented-javascript-and-prototypal-inheritance/function-constructor",
            "docId": "object-oriented-javascript-and-prototypal-inheritance/function-constructor"
          },
          {
            "type": "link",
            "label": "內建的函式建構子",
            "href": "/object-oriented-javascript-and-prototypal-inheritance/built-in-function-constructor",
            "docId": "object-oriented-javascript-and-prototypal-inheritance/built-in-function-constructor"
          },
          {
            "type": "link",
            "label": "純粹的原型繼承 - Object.create",
            "href": "/object-oriented-javascript-and-prototypal-inheritance/object-create",
            "docId": "object-oriented-javascript-and-prototypal-inheritance/object-create"
          },
          {
            "type": "link",
            "label": "ES6 Class",
            "href": "/object-oriented-javascript-and-prototypal-inheritance/classes",
            "docId": "object-oriented-javascript-and-prototypal-inheritance/classes"
          }
        ]
      },
      {
        "type": "category",
        "label": "BONUS",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "解析 toString() 方法 ft. typeof, instanceof",
            "href": "/bonus/tostring-typeof-instanceof",
            "docId": "bonus/tostring-typeof-instanceof"
          }
        ]
      }
    ]
  },
  "docs": {
    "bonus/tostring-typeof-instanceof": {
      "id": "bonus/tostring-typeof-instanceof",
      "title": "解析 toString() 方法 ft. typeof, instanceof",
      "description": "本文主要內容為探討 JavaScript 中 toString() 方法的相關知識，以及關鍵字 typeof 和 instanceof 的使用。",
      "sidebar": "tutorialSidebar"
    },
    "functions-extras/bind-call-apply": {
      "id": "functions-extras/bind-call-apply",
      "title": "bind()、call() 與 apply()",
      "description": "本文主要內容為探討 bind()、call() 與 apply() 的相關知識，這三個函式都與 this 有關，可以用來控制 this 變數。",
      "sidebar": "tutorialSidebar"
    },
    "functions-extras/callback-function": {
      "id": "functions-extras/callback-function",
      "title": "回呼函式 (Callback Function)",
      "description": "本文主要內容為探討「回呼函式」的相關知識，其實我們可能已經用過回呼函式的概念了，像是 setTimeout 或是 jQuery 事件就是在使用閉包與回呼的概念喔。",
      "sidebar": "tutorialSidebar"
    },
    "functions-extras/closure": {
      "id": "functions-extras/closure",
      "title": "閉包 (Closure)",
      "description": "本文主要內容為探討「閉包」的相關知識，這是 JavaScript 的一個重要觀念，會用到我們之前學到的所有概念，包含一級函式、執行堆、執行環境等等。",
      "sidebar": "tutorialSidebar"
    },
    "functions-extras/function-factory": {
      "id": "functions-extras/function-factory",
      "title": "函式工廠 (Function Factory)",
      "description": "本文主要內容為探討「函式工廠」的相關知識。閉包有很多有用的地方，像是函式工廠就是用閉包建立的模式，文章內容也會包含重載函式、一級函式、執行環境等概念。",
      "sidebar": "tutorialSidebar"
    },
    "functions-extras/functional-programming": {
      "id": "functions-extras/functional-programming",
      "title": "Functional Programming ft. Underscore, Loadsh",
      "description": "本文主要內容為探討「函式程式設計」的相關知識，透過一個經典的範例玩轉 Functional Programming，也會提到 Underscore 與 Loadsh 這兩個有名的資源庫。",
      "sidebar": "tutorialSidebar"
    },
    "intro": {
      "id": "intro",
      "title": "Getting Started",
      "description": "這個系列文章是 React - The Complete Guide (incl Hooks, React Router, Redux) 課程的學習筆記。",
      "sidebar": "tutorialSidebar"
    },
    "object-oriented-javascript-and-prototypal-inheritance/built-in-function-constructor": {
      "id": "object-oriented-javascript-and-prototypal-inheritance/built-in-function-constructor",
      "title": "內建的函式建構子",
      "description": "本文主要內容為探討「JavaScript 內建的函式建構子」的相關知識。",
      "sidebar": "tutorialSidebar"
    },
    "object-oriented-javascript-and-prototypal-inheritance/classes": {
      "id": "object-oriented-javascript-and-prototypal-inheritance/classes",
      "title": "ES6 Class",
      "description": "本文主要內容為探討另一個建立物件和設定原型的方法「ES6 Class」的相關知識。",
      "sidebar": "tutorialSidebar"
    },
    "object-oriented-javascript-and-prototypal-inheritance/function-constructor": {
      "id": "object-oriented-javascript-and-prototypal-inheritance/function-constructor",
      "title": "new × 函式建構子 × 原型屬性",
      "description": "本文主要內容為探討「關鍵字 new 與函式建構子」的相關知識，內容包含關鍵字 new、函式建構子，以及函式的原型屬性。",
      "sidebar": "tutorialSidebar"
    },
    "object-oriented-javascript-and-prototypal-inheritance/object-create": {
      "id": "object-oriented-javascript-and-prototypal-inheritance/object-create",
      "title": "純粹的原型繼承 - Object.create",
      "description": "本文主要內容為探討「Object.create」的相關知識以及搭配使用的 Polyfill。",
      "sidebar": "tutorialSidebar"
    },
    "object-oriented-javascript-and-prototypal-inheritance/prototype": {
      "id": "object-oriented-javascript-and-prototypal-inheritance/prototype",
      "title": "物件導向與原型繼承",
      "description": "本文主要內容為探討「原型」的相關知識，包含原型繼承、原型鏈、基本物件，以及資源庫 Underscore 裡面的 Reflection 與 Extend 模式。",
      "sidebar": "tutorialSidebar"
    },
    "objects-and-functions/arguments-spread": {
      "id": "objects-and-functions/arguments-spread",
      "title": "函式參數與 arguments、spread",
      "description": "本文主要內容為探討「函式參數」的相關知識，包含預設值、arguments 關鍵字、spread parameter 等等。",
      "sidebar": "tutorialSidebar"
    },
    "objects-and-functions/function-object": {
      "id": "objects-and-functions/function-object",
      "title": "函式就是物件 (Functions Are Objects)",
      "description": "本文主要內容為探討「函式物件」的相關知識，包含「一級函式」這個讓 JavaScript 適合撰寫 Functional Programming 的特性，以及函式陳述式、函式表達式、匿名函式等重要觀念。",
      "sidebar": "tutorialSidebar"
    },
    "objects-and-functions/iife-safe-code": {
      "id": "objects-and-functions/iife-safe-code",
      "title": "立即呼叫的函式表達式 (IIFEs) 與安全程式碼",
      "description": "本文主要內容為探討「IIFE」的相關知識，理解為什麼 IIFE 會被應用在各種大型框架或資源庫裡面，並且能幫助撰寫安全的程式碼。",
      "sidebar": "tutorialSidebar"
    },
    "objects-and-functions/object-literal": {
      "id": "objects-and-functions/object-literal",
      "title": "物件實體語法 (Object Literal Syntax)",
      "description": "本文主要內容為探討「物件」的相關知識，包含成員取用運算子、物件實體語法、偽裝命名空間，與 JSON 資料格式。",
      "sidebar": "tutorialSidebar"
    },
    "objects-and-functions/this": {
      "id": "objects-and-functions/this",
      "title": "物件 × 函式 × this",
      "description": "本文主要內容為探討物件、函式，以及那個令人困惑的「this」的指向問題與相關知識。",
      "sidebar": "tutorialSidebar"
    },
    "objects-and-functions/value-reference": {
      "id": "objects-and-functions/value-reference",
      "title": "傳值和傳參考",
      "description": "本文主要介紹「傳值和傳參考」的概念，這對於 JavaScript 的開發與除錯會很有幫助，如果不知道這些觀念，可能會導致一些很難 Debug 的奇怪問題。",
      "sidebar": "tutorialSidebar"
    },
    "react-basics-working-with-components/introducing-jsx": {
      "id": "react-basics-working-with-components/introducing-jsx",
      "title": "Introducing JSX",
      "description": "- Style 要放一個物件，所以寫起來會有兩對括號：style={{background '16'}}",
      "sidebar": "tutorialSidebar"
    },
    "types-and-operators/operators": {
      "id": "types-and-operators/operators",
      "title": "運算子 (Operators)",
      "description": "本文主要內容為探討「運算子」的各種概念，能幫助我們順利除錯與瞭解可能會因為動態型別而產生的問題。",
      "sidebar": "tutorialSidebar"
    },
    "types-and-operators/types": {
      "id": "types-and-operators/types",
      "title": "型別 (Types)",
      "description": "JavaScript 很特別，它與其他程式語言不同，尤其是處理變數資料與型別的部分。本文主要內容為「型別」的相關知識，包含動態型別、純值、陣列，至於物件則會紀錄在其他筆記中。",
      "sidebar": "tutorialSidebar"
    }
  }
}